# Supported machines
#MACHINE ?= "raspberrypi"
#MACHINE ?= "raspberrypi2"
#MACHINE ?= "raspberrypi3"
#MACHINE ?= "raspberrypi3-64"
#MACHINE ?= "revpi-connect"
#MACHINE ?= "revpi-core-3"
#MACHINE ?= "raspberrypi4-64"
#MACHINE ?= "raspberrypi400-64"
#MACHINE ?= "raspberrypicm4-ioboard"
#MACHINE ?= "npe-x500-m3"
#MACHINE ?= "rt-rpi-300"
#MACHINE ?= "raspberrypi3-unipi-neuron"

# More info meta-resin/README.md
#TARGET_REPOSITORY ?= ""
#TARGET_TAG ?= ""

# RaspberryPi specific variables
GPU_MEM = "16"

# for the moment, we disable vc4 graphics for all but the 64 bits machines
DISABLE_VC4GRAPHICS = "1"
DISABLE_VC4GRAPHICS:remove:raspberrypi3-64 = "1"
DISABLE_VC4GRAPHICS:remove:raspberrypi4-64 = "1"
DISABLE_VC4GRAPHICS:remove:raspberrypi0-2w-64 = "1"

# RPI BSP uses uncompressed kernel images by default
KERNEL_IMAGETYPE="zImage"
KERNEL_BOOTCMD="bootz"

# When u-boot is enabled we need to use the "Image" format and the "booti"
# command to load the kernel for rpi3 64 bits
KERNEL_IMAGETYPE:raspberrypi3-64="Image.gz"
KERNEL_BOOTCMD:raspberrypi3-64 = "booti"
KERNEL_IMAGETYPE:raspberrypi4-64="Image.gz"
KERNEL_BOOTCMD:raspberrypi4-64 = "booti"
KERNEL_IMAGETYPE:raspberrypi0-2w-64 = "Image.gz"
KERNEL_BOOTCMD:raspberrypi0-2w-64 = "booti"

# RPI Use u-boot. This needs to be 1 as we use u-boot
RPI_USE_U_BOOT = "1"

# Set this to 1 to disable quiet boot and allow bootloader shell access
#OS_DEVELOPMENT = "1"

# Set this to make build system generate resinhup bundles
#RESINHUP ?= "yes"

# Set this to change the supervisor tag used
#SUPERVISOR_TAG ?= "master"

# Compress final raw image
#BALENA_RAW_IMG_COMPRESSION ?= "xz"

# Parallelism Options
BB_NUMBER_THREADS ?= "${@oe.utils.cpu_count()}"
PARALLEL_MAKE ?= "-j ${@oe.utils.cpu_count()}"

# Resin specific distros
DISTRO ?= "resin-systemd"

# Custom downloads directory
#DL_DIR ?= "${TOPDIR}/downloads"

# Custom sstate directory
#SSTATE_DIR ?= "${TOPDIR}/sstate-cache"

# Inheriting this class has shown to speed up builds due to significantly lower
# amounts of data stored in the data cache as well as on disk.
# http://www.yoctoproject.org/docs/latest/mega-manual/mega-manual.html#ref-classes-rm-work
#INHERIT += "rm_work"

# Remove the old image before the new one is generated to save disk space when RM_OLD_IMAGE is set to 1, this is an easy way to keep the DEPLOY_DIR_IMAGE clean.
RM_OLD_IMAGE = "1"

# Additional image features
USER_CLASSES ?= "buildstats image-prelink"

# By default disable interactive patch resolution (tasks will just fail instead):
PATCHRESOLVE = "noop"

# Disk Space Monitoring during the build
BB_DISKMON_DIRS = "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},1G,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K"

CONF_VERSION = "2"

HOSTTOOLS += "docker iptables"
