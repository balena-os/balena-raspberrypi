#!/bin/sh

# shellcheck disable=SC1091
. /usr/libexec/os-helpers-logging
. /usr/libexec/os-helpers-fs
. /usr/libexec/os-helpers-sb
. /usr/sbin/balena-config-defaults

# Give a chance to the by-state directory to appear
# We do not expect any particular device or partition to come up
# but if balenaOS is correctly configured on the device the by-state
# directory will eventually be created by the custom udev rule.
# This is useful if the rootfs is on a device that takes a while
# to initialize such as a USB disk.
wait4file "/dev/disk/by-state" "50"
BALENA_NONENC_BOOT_DEV=""

cryptsetup_enabled() {
    BALENA_NONENC_BOOT_DEV=$(get_state_path_from_label @@BALENA_NONENC_BOOT_LABEL@@)
    # Only run if the boot partition is split
    if [ ! -e "$BALENA_NONENC_BOOT_DEV" ]; then
        return 1
    fi

    # Flasher should not try to unlock the partitions
    if [ "$bootparam_flasher" = "true" ]; then
        # Remove the encrypted key to guarantee flasher cannot mount pre-existing partitions
        _tmpdir=$(mktemp -d)
        if mount "$BALENA_NONENC_BOOT_DEV" "$_tmpdir"; then
            if [ -f "${_tmpdir}/balena-luks.enc" ]; then
                if ! rm "${_tmpdir}/balena-luks.enc"; then
                    fail "Failure to remove pre-installed LUKS key - aborting boot"
                fi
                sync
                info "Removed pre-installed LUKS key."
            fi
        else
            fail "Failure to mount $BALENA_NONENC_BOOT_DEV - aborting boot"
        fi
        return 1
    fi

    # Ensure that secure boot is enabled and device is locked
    if ! is_secured; then
      fail "Device not locked - boot aborted"
    fi


    # Check whether there are any LUKS partitions
    if ! lsblk -nlo fstype | grep -q crypto_LUKS; then
        return 1
    fi

    return 0
}

cryptsetup_run() {
    TMP_MOUNT_DIR=$(mktemp -d)
    mount "$BALENA_NONENC_BOOT_DEV" "$TMP_MOUNT_DIR"

    PASSPHRASE_FILE=$(mktemp -u)
    if ! gpg --decrypt --batch --passphrase "$(otp_read_key)" -o "$PASSPHRASE_FILE" "${TMP_MOUNT_DIR}/balena-luks.enc"; then
        umount "$TMP_MOUNT_DIR"
        fail "Failed to decrypt LUKS passphrase"
    fi

    BOOT_DEVICE=$(lsblk -nlo pkname "${BALENA_NONENC_BOOT_DEV}")

    # Unlock all the partitions - cryptsetup luksOpen does not wait for udev processing
    # of the DM device to complete, it just kicks off the process and returns.
    # Since this is async, we can perform all the luksOpens here, note the device names
    # and wait for them in a separate loop later
    LUKS_UNLOCKED=""
    for LUKS_UUID in $(lsblk -nlo uuid,fstype "/dev/${BOOT_DEVICE}" | grep crypto_LUKS | cut -d " " -f 1); do
        cryptsetup luksOpen --key-file $PASSPHRASE_FILE UUID="${LUKS_UUID}" luks-"${LUKS_UUID}"
        LUKS_UNLOCKED="${LUKS_UNLOCKED} luks-${LUKS_UUID}"
    done

    # Wait for udev processing of each unlocked device
    for DM_NAME in ${LUKS_UNLOCKED}; do
        wait4udev "/dev/mapper/${DM_NAME}"
    done

    rm -f "$PASSPHRASE_FILE"
    umount "$TMP_MOUNT_DIR"
    rmdir "$TMP_MOUNT_DIR"
}
