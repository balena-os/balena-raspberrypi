From: Alex Gonzalez <alexg@balena.io>
Date: Mon, 24 Oct 2022 16:07:36 +0200
Subject: [PATCH 2/9] unipi_spi: use new structure for SPI transfer delays

In a change to the SPI subsystem [1], a new `delay` struct was added
to replace the `delay_usecs`. This change replaces the current
`delay_usecs` with `delay` for this driver.

[1] commit bebcfd272df6 ("spi: introduce `delay` field for
    `spi_transfer` + spi_transfer_delay_exec()")

Upstream-status: pending
Signed-off-by: Alex Gonzalez <alexg@balena.io>
---
 modules/unipi/src/unipi_spi.c | 17 ++++++++++++++++-
 1 file changed, 16 insertions(+), 1 deletion(-)

diff --git a/modules/unipi/src/unipi_spi.c b/modules/unipi/src/unipi_spi.c
index a65ace3a33f3..e4d3783d532d 100644
--- a/modules/unipi/src/unipi_spi.c
+++ b/modules/unipi/src/unipi_spi.c
@@ -329,7 +329,12 @@ struct unipi_spi_context* unipi_spi_setup_context(struct spi_device* spi_dev, st
     s_trans = (struct spi_transfer *)(context + 1);
     spi_message_init_with_transfers(&context->message, s_trans, trans_count);
 
-	s_trans[0].delay_usecs = NEURONSPI_EDGE_DELAY;
+#if  LINUX_VERSION_CODE < KERNEL_VERSION(5, 13, 0)
+        s_trans[0].delay_usecs = NEURONSPI_EDGE_DELAY;
+#else
+        s_trans[0].delay.value = NEURONSPI_EDGE_DELAY;
+        s_trans[0].delay.unit = SPI_DELAY_UNIT_USECS;
+#endif
 	s_trans[0].bits_per_word = 8;
 	s_trans[0].speed_hz = freq;
 
@@ -341,7 +346,12 @@ struct unipi_spi_context* unipi_spi_setup_context(struct spi_device* spi_dev, st
             packet_crc = neuronspi_spi_crc(send_buf->first_message, 4, 0);
             *((u16*)(send_buf->first_message+4)) = packet_crc;
         }
+#if  LINUX_VERSION_CODE < KERNEL_VERSION(5, 13, 0)
         s_trans[1].delay_usecs = delay;
+#else
+        s_trans[1].delay.value = delay;
+        s_trans[1].delay.unit = SPI_DELAY_UNIT_USECS;
+#endif
         s_trans[1].len = NEURONSPI_FIRST_MESSAGE_LENGTH;
         s_trans[1].tx_buf = send_buf->first_message;
         s_trans[1].rx_buf = recv_buf->first_message;
@@ -355,7 +365,12 @@ struct unipi_spi_context* unipi_spi_setup_context(struct spi_device* spi_dev, st
 		unipi_spi_trace_1(KERN_INFO "UNIPISPI: SPI Master Write(%3d) %32ph\n", len, send_buf->second_message);
 		remain = len;
 		for (i = 2; i < trans_count; i++) {
+#if  LINUX_VERSION_CODE < KERNEL_VERSION(5, 13, 0)
 			s_trans[i].delay_usecs = 0;
+#else
+			s_trans[i].delay.value = 0;
+			s_trans[i].delay.unit = SPI_DELAY_UNIT_USECS;
+#endif
 			s_trans[i].bits_per_word = 8;
 			s_trans[i].speed_hz = freq;
 			s_trans[i].tx_buf = send_buf->second_message + (NEURONSPI_MAX_TX * (i - 2));
